"use strict";
const noRelativeParentRequire = require("eslint-plugin-no-relative-parent-require");
const checkIfStaticRequire = require("./utils/checkIfStaticRequire");
const isShadowed = require("./utils/isShadowed");
const toCamel = require("./utils/toCamel");

const ACCEPTABLE_PARENTS = [
  "AssignmentExpression",
  "VariableDeclarator",
  "MemberExpression",
  "ExpressionStatement",
  "CallExpression",
  "ConditionalExpression",
  "Program",
  "VariableDeclaration"
];

module.exports = {
  rules: {
    "module-alias-register-should-be-first": {
      create: function(context) {
        let imports = [];
        return {
          CallExpression(node) {
            if (checkIfStaticRequire(node)) {
              const depPath = node.arguments[0].value;
              imports.push({ path: depPath, node });
            }
          },
          "Program:exit": function reportAndReset() {
            const moduleAliasRegister = imports.find(
              i => i.path === "module-alias/register"
            );
            if (moduleAliasRegister) {
              const isModuleAliasFirstRequire =
                imports.findIndex(i => i.path === "module-alias/register") ===
                0;
              if (!isModuleAliasFirstRequire) {
                context.report({
                  node: moduleAliasRegister.node,
                  message: `require("module-alias/register"); should be first line in the module.`
                });
              }
            }
            imports = [];
          }
        };
      }
    },
    "module-alias-register-missing": {
      create: function(context) {
        let imports = [];
        return {
          CallExpression(node) {
            if (checkIfStaticRequire(node)) {
              const depPath = node.arguments[0].value;
              imports.push({ path: depPath, node });
            }
          },
          "Program:exit": function reportAndReset() {
            const moduleAliasRegister = imports.find(
              i => i.path === "module-alias/register"
            );
            if (!moduleAliasRegister) {
              context.report({
                loc: {
                  start: { line: 0, column: 0 },
                  end: { line: 0, column: 1 }
                },
                message: `require("module-alias/register"); should be first line in the module.`,
                fix: function(fixer) {
                  return fixer.insertTextBeforeRange(
                    [0, 0],
                    `require("module-alias/register");\n`
                  );
                }
              });
            }
            imports = [];
          }
        };
      }
    },
    "use-non-global-require-instead": {
      // adapted from https://github.com/eslint/eslint/blob/master/lib/rules/global-require.js
      create: function(context) {
        return {
          CallExpression(node) {
            const currentScope = context.getScope();

            if (
              node.callee.name === "require" &&
              !isShadowed(currentScope, node.callee)
            ) {
              let shouldWarn = false;
              if (
                node.arguments &&
                node.arguments[0] &&
                node.arguments[0].type === "Literal"
              ) {
                const value = node.arguments[0].value;
                if (
                  value.startsWith("~root") ||
                  value.startsWith("~justfulfil")
                ) {
                  shouldWarn = true;
                }
                if (value.startsWith("~root/serverless/middlewares")) {
                  shouldWarn = false;
                }
              }

              const isBadRequire = context
                .getAncestors()
                .every(parent => ACCEPTABLE_PARENTS.indexOf(parent.type) > -1);

              if (isBadRequire && shouldWarn) {
                context.report({
                  node,
                  message:
                    "Serverless functions set environment variables during runtime. Put require() statements within your function/handler body instead."
                });
              }
            }
          }
        };
      }
    },
    "snapshots-always-updated": {
      create: function(context) {
        return {
          MemberExpression(node) {
            if (
              node.property &&
              node.property.type === "Identifier" &&
              node.property.name === "matchSnapshot" &&
              node.parent &&
              node.parent.arguments &&
              node.parent.arguments[0] &&
              node.parent.arguments[0].type === "Literal" &&
              node.parent.arguments[0].value === true
            ) {
              context.report({
                node,
                message:
                  "Dont forget to remove `true` from your matchSnapshot() calls."
              });
            }
          }
        };
      }
    },
    "wrong-snake-case-usage-in-query": {
      create: function (context) {
        return {
          CallExpression(node) {
            if (
              node.callee.type === "Identifier" &&
              node.callee.name === "getFirst"
            ) {
              if (
                node.arguments[0] &&
                node.arguments[0].type === "CallExpression" &&
                node.arguments[0].callee.type === "Identifier" &&
                node.arguments[0].callee.name === "camelKeys"
              ) {
                if (node.arguments[1] && node.arguments[1].type === "Literal") {
                  if (node.arguments[1].value.includes("_")) {
                    const snakeCaseLiteralNode = node.arguments[1];
                    context.report({
                      node: snakeCaseLiteralNode,
                      message:
                        "Use camelCase when referring to database fields after using `camelKey` helper.",
                      fix(fixer) {
                        return fixer.replaceTextRange(
                          [
                            snakeCaseLiteralNode.start,
                            snakeCaseLiteralNode.end,
                          ],
                          `"${toCamel(snakeCaseLiteralNode.value)}"`
                        );
                      },
                    });
                  }
                }
              }
            }
          },
        };
      }
    },
    "wrong-order-of-query-helpers": {
      create: function (context) {
        return {
          CallExpression(node) {
            if (
              node.callee.type === "Identifier" &&
              node.callee.name === "camelKeys"
            ) {
              if (
                node.arguments[0] &&
                node.arguments[0].type === "CallExpression" &&
                node.arguments[0].callee.type === "Identifier" &&
                node.arguments[0].callee.name === "getFirst"
              ) {
                const getFirstNode = node.callee;
                const camelKeysNode = node.arguments[0].callee;
                context.report({
                  node: node,
                  message:
                    'Order of query helpers is wrong. Correct order: getFirst(camelKeys(myQuery), "my_field")',
                  fix(fixer) {
                    return [
                      fixer.replaceTextRange(
                        [getFirstNode.start, getFirstNode.end],
                        `getFirst`
                      ),
                      fixer.replaceTextRange(
                        [camelKeysNode.start, camelKeysNode.end],
                        `camelKeys`
                      ),
                    ];
                  },
                });
              }
            }
          }
        };
      }
    },
    "no-relative-parent-require":
      noRelativeParentRequire.rules["no-relative-parent-require"]
  }
};
