"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _lodash = require("lodash.values");

var _lodash2 = _interopRequireDefault(_lodash);

var _jestSnapshot = require("jest-snapshot");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var buildMatchSnapshot = function buildMatchSnapshot(utils, parseArgs) {
  if (thisRunsInJest()) {
    var jestExpect = safeRequireJestExpect();
    if (jestExpect) {
      return function matchSnapshot() {
        var _jestExpect;

        return (_jestExpect = jestExpect(this._obj)).toMatchSnapshot.apply(_jestExpect, arguments);
      };
    }
  }

  return function matchSnapshot() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _parseArgs = parseArgs(args),
        snapshotFilename = _parseArgs.snapshotFilename,
        snapshotName = _parseArgs.snapshotName,
        update = _parseArgs.update,
        ci = _parseArgs.ci;

    if (utils.flag(this, 'negate')) {
      throw new Error("`matchSnapshot` cannot be used with `.not`.");
    }

    var obj = this._obj;
    var absolutePathToSnapshot = _path2.default.resolve(snapshotFilename);
    var snapshotState = new _jestSnapshot.SnapshotState(void 0, {
      updateSnapshot: ci ? "none" : update ? "all" : "new",
      snapshotPath: absolutePathToSnapshot
    });

    var match = snapshotState.match(snapshotName, obj, snapshotName);
    var actual = match.actual || "";
    var expected = match.expected || "";
    snapshotState.save();

    this.assert(match.pass, "expected value to match snapshot " + snapshotName, "expected value to not match snapshot " + snapshotName, expected.trim(), actual.trim(), true);
  };
};

var safeRequireJestExpect = function safeRequireJestExpect() {
  // Jest might rename its "jest-matchers" module to "expect", so let's
  // avoid an actual require and bank on the global expect here.
  // (see https://github.com/facebook/jest/issues/1679#issuecomment-282478002)
  return typeof expect === 'undefined' ? null : expect;
};

var JEST_MARKERS = ["enableAutomock", "genMockFromModule", "clearAllMocks", "runAllTicks"];

var thisRunsInJest = function thisRunsInJest() {
  return (typeof jest === "undefined" ? "undefined" : _typeof(jest)) === "object" && JEST_MARKERS.every(function (marker) {
    return typeof jest[marker] === "function";
  });
};

exports.default = buildMatchSnapshot;